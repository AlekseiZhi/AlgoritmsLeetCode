# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: TestCi

env:
 APPLICATION_NAME       : "MyName" 
 DEPLOY_PACKAJE_NAME    : "Name-for-Deploy-ver-${{ github.sha }}"

on:
  push:
   branches: 
    - main

jobs:
  myTest:
    runs-on: ubuntu-latest

    steps:
    - name: First task from my test
      run: echo "Hello World from testing myTest job"
    
    - name: Second task from myTset 
      run: |
        echo "Hello Message 1"
        echo "Hello Message 2"
        echo "Application name: ${{ env.APPLICATION_NAME }}"
        
    - name: list current folder   
      run: ls -la
      
    - name: Git Clone My Repo
      uses: actions/checkout@v1
        
    - name: list current folder
      run: ls -la
        
  my_deploy: 
   runs-on: ubuntu-latest
   needs: [myTest]
   env:
     VAR1: "this is job variable 1"
     VAR2: "this is job variable2"
     
   steps:
     - name: First task from deploy
       run: echo "Hello World from Deploy job"
       
     - name: Print env vars
       run: |
         echo "Var1 = ${{env.VAR1}}"
         echo "Var2 = ${{env.VAR2}}"
         echo: "Print Local Var ${{ env.LOCAL_VAR}}"
       env:
         LOCAL_VAR: "this is super local var"
       
     - name: Second task from deploy
       run: echo "Deploy package name is ${{ env.DEPLOY_PACKAJE_NAME }}"
       
     - name: Lets test Some Package for aws
       run: aws --version
       
     - name: Lets test some zip
       run: zip --version
